<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于VS Code的学习笔记</title>
      <link href="/2020/05/10/%E5%85%B3%E4%BA%8EVS-Code%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/10/%E5%85%B3%E4%BA%8EVS-Code%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工欲善其事必先利其器</p><p>关于vscode的学习笔记</p></blockquote><h2 id="1-Command-Palette命令面板"><a href="#1-Command-Palette命令面板" class="headerlink" title="1 Command Palette命令面板"></a>1 Command Palette命令面板</h2><ul><li><p>命令面板：<code>Ctrl+Shift+P</code></p><ul><li>可以快速打开命令面板，命令面板可以执行各种命令</li><li>面板命令为模糊查询，记住关键词即可  </li><li>常用的命令，有快捷键的优先使用快捷键<ul><li><code>Minimap</code>：缩略图</li></ul></li></ul></li><li><p>快捷键：</p><ul><li><code>Ctrl+k,Ctrl+M</code>：快捷键的映射，通过安装扩展，可以使用之前熟悉的软件的快捷键</li><li><code>Ctrl+k,Ctrl+S</code>：在编辑器中查看所有的快捷键<ul><li>当安装扩展后，可能会发生快捷键冲突，可以在这里查询并更改</li></ul></li><li><code>Ctrl+K,Ctrk+R</code>：打开网址<ul><li><a href="https://files.cnblogs.com/files/skyraker/VSCODE_%E5%BF%AB%E6%8D%B7%E9%94%AE.7z" target="_blank" rel="noopener">网上搜罗到的有中文对照的快捷键图例，点击下载</a></li></ul></li></ul></li><li><p>常用快捷键</p><ul><li><code>Ctrl+B</code>：侧边栏的显示与隐藏</li><li><p><code>Ctrl+P</code>：将允许您通过键入其他名称导航到任何文件或符号</p></li><li><p><code>Ctrl+Shift+Tab</code>：将循环浏览最后一组打开的文件</p></li><li><code>Ctrl+Shift+O</code>：将允许您导航到文件中的特定符号</li><li><code>Ctrl+G</code>：将允许您导航到文件中的特定行</li><li>Ctrl+`：可以查看程序输出、调试输出、问题输出和终端命令<ul><li>Ctrl+Shift+`：新建终端</li></ul></li><li><code>Ctrl+K之后Ctrl+T</code>：开启主题切换，回车确认主题的更改<ul><li>更多主题：扩展中搜索<code>theme</code></li><li>自定义配置：见视图配置项<code>Settings</code></li></ul></li></ul></li></ul><h2 id="2-编辑器视图的控制"><a href="#2-编辑器视图的控制" class="headerlink" title="2 编辑器视图的控制"></a>2 编辑器视图的控制</h2><ul><li><p>编辑器视图，单击文件就可以在编辑器中打开视图，可以同时打开多个文件以不同的方式。</p></li><li><p>可以对编辑器进行配置，例如：字体，颜色，字号登等</p><ul><li>命令：<code>&gt;Open Settings (UI)</code> || <code>&gt;Open Settings (JSON)</code></li></ul></li></ul><h2 id="3-VS-Code基本代码编写"><a href="#3-VS-Code基本代码编写" class="headerlink" title="3  VS Code基本代码编写"></a>3  VS Code基本代码编写</h2><blockquote><p>小细节：</p><ul><li>打开文件单击与双击的区别。单击为浏览状态，单击其他文件的时候会被替换。</li></ul></blockquote><h3 id="3-1-快捷键"><a href="#3-1-快捷键" class="headerlink" title="3.1 快捷键"></a>3.1 快捷键</h3><ul><li><p>最常用的快捷键列表如下</p><p>| 快捷键        | 意义       |<br>| ——————- | ————— |<br>| Ctrl+P        | 浏览文件   |<br>| Ctrl+Shift+F  | 查找       |<br>| Ctrl+W        | 关闭文件   |<br>| Ctrl+/        | 注释       |<br>| Shift+Alt+A   | 块注释     |<br>| Shift+Alt+F   | 格式化文档 |<br>| Ctrl+K,Ctrl+F | 格式化选中 |<br>| Ctrl+Shift+K  | 删除行     |<br>|               |            |</p></li></ul><h3 id="3-2-选择多行"><a href="#3-2-选择多行" class="headerlink" title="3.2 选择多行"></a>3.2 选择多行</h3><ul><li><p><code>Alt+click</code> || <code>Ctrl+Alt+按住滑轮上下滑动</code> ：插入多个光标</p></li><li><p><code>Ctrl+D</code>：选择相同的word</p></li></ul><h2 id="4-VS-Code扩展市场"><a href="#4-VS-Code扩展市场" class="headerlink" title="4 VS Code扩展市场"></a>4 VS Code扩展市场</h2><blockquote><p>VS Code之所以强大，就是因为可以添加扩展，并且扩展丰富，好用</p></blockquote><p>4.1 使用VS Code扩展</p><ul><li><p>浏览扩展</p></li><li><p>安装扩展</p></li><li><p>扩展详细</p></li><li><p>过滤扩展</p></li><li><p>排序扩展</p></li><li><p>搜索扩展</p></li><li><p>管理扩展</p><ul><li><p>安装</p></li><li><p>装卸</p></li><li>启用</li><li>禁用</li></ul></li><li><p>扩展分类</p></li><li><p>更新扩展</p></li></ul><h2 id="5-VS-Code-代码补全-IntelliSense"><a href="#5-VS-Code-代码补全-IntelliSense" class="headerlink" title="5 VS Code 代码补全(IntelliSense)"></a>5 VS Code 代码补全(IntelliSense)</h2><blockquote><p>VS Code的代码补全功能依赖各种扩展，例如：java、Python、Go、C#等等，IntellSense可以实现代码补全，内容辅助，代码提示等功能</p></blockquote><ul><li>安装所需扩展</li><li>输入代码按Tab或者Enter来实现代码补全</li></ul><h2 id="6-VS-Code-代码导航"><a href="#6-VS-Code-代码导航" class="headerlink" title="6 VS Code 代码导航"></a>6 VS Code 代码导航</h2><h3 id="6-1-快速文件导航"><a href="#6-1-快速文件导航" class="headerlink" title="6.1 快速文件导航"></a>6.1 快速文件导航</h3><blockquote><p>VS Code可以快速在文件之间进行导航</p></blockquote><ul><li><code>Ctrl+P</code>：快速打开文件</li><li><code>Ctrl+Tab</code>：已打开的文件中循环切换</li></ul><h3 id="6-2-跳转到文件定义处"><a href="#6-2-跳转到文件定义处" class="headerlink" title="6.2 跳转到文件定义处"></a>6.2 跳转到文件定义处</h3><ul><li><code>F12</code>：可以跳转到文件定义的地方，同：<code>Ctrl+Alt+Click</code></li><li><code>Ctrl+鼠标经过</code>：可以显示帮助信息，告诉我们文件定义的地方在哪里</li><li><code>Ctrl+Shift+O</code>：跳转到Symbol(方法或者变量)，如果文件很大，方法很多的时候可以使用它</li></ul><h3 id="6-3-Peek"><a href="#6-3-Peek" class="headerlink" title="6.3 Peek"></a>6.3 Peek</h3><ul><li><code>Shift+F12</code>：Peek可以嵌入在当前页面进行浏览，这样可以很方便，也可以右键点击选择Peek</li></ul><h3 id="6-4-括号匹配"><a href="#6-4-括号匹配" class="headerlink" title="6.4 括号匹配"></a>6.4 括号匹配</h3><ul><li><code>Ctrl+Shift+\</code>：如果一个方法内容很多，并且有很多方法，使用该快捷键，可以很容易的判断每一个方法的内容区域</li></ul><h2 id="7-VS-Code-代码重构"><a href="#7-VS-Code-代码重构" class="headerlink" title="7 VS Code 代码重构"></a>7 VS Code 代码重构</h2><blockquote><p>源代码重构可以通过重构代码而不用修改运行时行为来提高项目的质量和可维护性，VS Code支持重构操作，例如：Extract Method和Extract Varlable,以改善编辑器中的代码库</p></blockquote><h3 id="7-1-重构代码"><a href="#7-1-重构代码" class="headerlink" title="7.1 重构代码"></a>7.1 重构代码</h3><blockquote><p>重构代码，根据右键选择的不同内容，有不同的重构选择</p></blockquote><ul><li>选择一个完整的方法，可以重构到新的文件中</li><li><p>选择一个return的输出</p><ul><li>重构为一个内部的声明变量</li><li>重构为闭包</li><li>重构为全局变量</li></ul></li><li><p>等等….</p></li></ul><p>…重构有风险，忍住欲望，不要试图重构你不理解的代码。</p><h3 id="7-2-重命名symbol"><a href="#7-2-重命名symbol" class="headerlink" title="7.2 重命名symbol"></a>7.2 重命名symbol</h3><ul><li><code>F2</code>：可以选择符号，例如变量名，方法函数名等等，进行批量重命名</li></ul><h2 id="8-VS-Code-代码调试"><a href="#8-VS-Code-代码调试" class="headerlink" title="8 VS Code 代码调试"></a>8 VS Code 代码调试</h2><blockquote><p>VS Code的一个关键功能就是其出色的调试支持，VS Code的内置调试器有助于加速编辑，编译和调试循环</p></blockquote><h3 id="8-1-调试扩展"><a href="#8-1-调试扩展" class="headerlink" title="8.1 调试扩展"></a>8.1 调试扩展</h3><blockquote><p>VS Code具有对Node.js运行时的内置调制支持，可以调试JavaScript，TypeScript,TypeScript以及任何转换为JavaScript的语言，要调试其他语言和运行时(包括PHP,Ruby,Go,C#,Python,C++,Powershell等)，需要在VS扩展中查找安装调试器扩展。</p></blockquote><ul><li>如果涉及到其他语言，需安装附加调试器</li></ul><h3 id="8-2-添加断点"><a href="#8-2-添加断点" class="headerlink" title="8.2 添加断点"></a>8.2 添加断点</h3><blockquote><p>在编辑器代码区域最左端，点击添加断点</p></blockquote><h3 id="8-3-调试快捷键"><a href="#8-3-调试快捷键" class="headerlink" title="8.3 调试快捷键"></a>8.3 调试快捷键</h3><div class="table-container"><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F5</td><td>继续/暂停</td></tr><tr><td>F10</td><td>跳过</td></tr><tr><td>F11</td><td>进入</td></tr><tr><td>Shift+F11</td><td>退出</td></tr><tr><td>Ctrl+Shift+F5</td><td>重新开始</td></tr><tr><td>Shift+F5</td><td>停止</td></tr></tbody></table></div><h2 id="9-VS-Code-集成终端"><a href="#9-VS-Code-集成终端" class="headerlink" title="9 VS Code 集成终端"></a>9 VS Code 集成终端</h2><blockquote><p>在Visual Studio Code中，您可以打开一个集成终端，最初从工作区的根目录开始，这可以非常方便，因为您不必切换窗口或更改现有终端的状态以执行快速命令行任务</p></blockquote><h3 id="9-1-打开终端视图"><a href="#9-1-打开终端视图" class="headerlink" title="9.1 打开终端视图"></a>9.1 打开终端视图</h3><ul><li>打开终端：Ctrl+` || view&gt;terminal 菜单 || 命令-&gt;Toggle Integrated Terminal</li><li>Ctrl+Shift+`：新建终端</li></ul><h3 id="9-2-管理多个终端"><a href="#9-2-管理多个终端" class="headerlink" title="9.2 管理多个终端"></a>9.2 管理多个终端</h3><ul><li>添加/删除多个终端</li></ul><h3 id="9-3-配置终端"><a href="#9-3-配置终端" class="headerlink" title="9.3 配置终端"></a>9.3 配置终端</h3><ul><li><p>终端类型,搜索 <code>terminal</code> 进行配置,具体的指向地址根基实际改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Command Prompt</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\cmd.exe"</span></span><br><span class="line"><span class="comment">// PowerShell</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span></span><br><span class="line"><span class="comment">// Git Bash</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span></span><br><span class="line"><span class="comment">// Bash on Ubuntu (on Windows)</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\bash.exe"</span></span><br></pre></td></tr></table></figure></li><li><p>终端样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">terminal.integrated.fontFamily</span><br><span class="line">terminal.integrated.fontSize</span><br><span class="line">terminal.integrated.fontWeight</span><br><span class="line">terminal.integrated.fontWeightBold</span><br><span class="line">terminal.integrated.lineHeight</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-VS-Code使用Emmet"><a href="#10-VS-Code使用Emmet" class="headerlink" title="10 VS Code使用Emmet"></a>10 VS Code使用Emmet</h2><blockquote><p>Emmet类似于CSS选择器的语法来描述元素在生成的树和元素属性中的位置。</p><p>Tab或Enter键触发</p></blockquote><h3 id="10-1-元素"><a href="#10-1-元素" class="headerlink" title="10.1 元素"></a>10.1 元素</h3><ul><li>可以直接使用元素的名字来快速生成Html标签</li><li>可以编写任何单词并将其转换为标签</li></ul><h3 id="10-2-嵌套运算符"><a href="#10-2-嵌套运算符" class="headerlink" title="10.2 嵌套运算符"></a>10.2 嵌套运算符</h3><blockquote><p>嵌套运算符用于在生成的树中定位缩写的元素</p></blockquote><ul><li><code>&gt;</code>：子元素<ul><li>可以使用<code>&gt;</code>运算符将元素嵌套在彼此内</li></ul></li><li><code>+</code>：兄弟元素<ul><li>可以使用<code>+</code>运算符将元素放在彼此的附近，在同一级别上</li></ul></li><li><code>^</code>：向上<ul><li>使用<code>^</code>运算符，可以爬到树的上一个级别</li></ul></li><li><code>*</code>：乘法<ul><li>使用<code>*</code>运算符，可以定义元素应该输出的次数</li></ul></li><li><code>（）</code>：分组<ul><li>使用<code>()</code>对复杂缩写中的子树进行分组</li></ul></li><li><code>[]</code>：定义属性<ul><li>以<code>[id=ab][name=abel]</code>的格式定义属性值</li></ul></li><li><code>{}</code>：定义内容<ul><li>在元素标签中定义内容</li><li><code>$</code>：代表累加，也可以运用在属性定义中。</li></ul></li></ul><h3 id="10-3-属性运算符"><a href="#10-3-属性运算符" class="headerlink" title="10.3 属性运算符"></a>10.3 属性运算符</h3><blockquote><p>属性运算符用于修改输出元素的属性</p></blockquote><ul><li><code>#id_name</code>：给元素添加id属性</li><li><code>.class_name</code>：给元素添加class属性</li></ul><h3 id="10-4-CSS缩写"><a href="#10-4-CSS缩写" class="headerlink" title="10.4 CSS缩写"></a>10.4 CSS缩写</h3><blockquote><p>对于CSS语法，Emmet有很多预定义的属性片段。</p><p>作用于Style区域中</p></blockquote><p>例如：</p><ul><li><p><code>m-10--20</code>：<code>margin: -10px -20px;</code></p></li><li><p><code>p20</code>：<code>padding: 20px;</code></p></li><li><code>h20</code>：<code>height: 20px;</code></li><li>……..</li></ul><h2 id="11-Vscode开发JavaScript"><a href="#11-Vscode开发JavaScript" class="headerlink" title="11 Vscode开发JavaScript"></a>11 Vscode开发JavaScript</h2><h3 id="11-1-智能跟踪"><a href="#11-1-智能跟踪" class="headerlink" title="11.1 智能跟踪"></a>11.1 智能跟踪</h3><ul><li>常见结构<ul><li>for</li><li>while</li><li>do while</li><li>if else</li><li>try/catch</li><li>…..</li></ul></li><li>代码提示</li><li>自动导入</li></ul><h3 id="11-2-文本注释"><a href="#11-2-文本注释" class="headerlink" title="11.2 文本注释"></a>11.2 文本注释</h3><ul><li><code>Ctrl+/</code>：注释 </li><li><code>Shift+Alt+A</code>：块注释</li></ul><h3 id="11-3-代码重构"><a href="#11-3-代码重构" class="headerlink" title="11.3 代码重构"></a>11.3 代码重构</h3><ul><li>提取函数</li><li>提取变量</li></ul><h2 id="12-VS-Code-创建markdown格式文件"><a href="#12-VS-Code-创建markdown格式文件" class="headerlink" title="12 VS Code 创建markdown格式文件"></a>12 VS Code 创建markdown格式文件</h2><h3 id="12-1-markdown扩展"><a href="#12-1-markdown扩展" class="headerlink" title="12.1 markdown扩展"></a>12.1 markdown扩展</h3><ul><li>Markdown All in One</li><li>Markdown Shortcuts</li></ul><h2 id="13-VS-Code-开发TypeScript"><a href="#13-VS-Code-开发TypeScript" class="headerlink" title="13 VS Code 开发TypeScript"></a>13 VS Code 开发TypeScript</h2><blockquote><p>TypeScript是JavaScript的类型超集，可以编译为纯JavaScript，它提供了类，模块和接口，可以帮助我们构建健壮的组件</p></blockquote><h3 id="13-1-安装TypeScript编辑器"><a href="#13-1-安装TypeScript编辑器" class="headerlink" title="13.1 安装TypeScript编辑器"></a>13.1 安装TypeScript编辑器</h3><ul><li><p>命令行安装: <code>npm install -g typescript</code></p></li><li><p>验证</p><ul><li><code>tsc --version</code></li><li><code>tsc --help</code></li></ul></li></ul><h3 id="13-2-创建-ts"><a href="#13-2-创建-ts" class="headerlink" title="13.2 创建.ts"></a>13.2 创建.ts</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Startup</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> main(): number &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过编译，我们可以将.ts文件转换为.js文件</p><ul><li>编译 <code>tsc 文件名.ts</code></li></ul><h3 id="13-3-创建ts项目"><a href="#13-3-创建ts项目" class="headerlink" title="13.3 创建ts项目"></a>13.3 创建ts项目</h3><ul><li><p>tsconfig.json配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 任务编译项目</p><ul><li><code>Ctrl+Shift+B</code>：Run Build Task</li></ul></li></ul><h2 id="1-扩展推荐"><a href="#1-扩展推荐" class="headerlink" title="1 扩展推荐"></a>1 扩展推荐</h2><blockquote><p>按需采纳</p></blockquote><ul><li>HTML Snippets</li><li>HTML CSS Support</li><li>intelliSense for CSS class names in HTML</li><li>HTMLHint</li><li>Beautify css/sass/scss/less</li><li><p>stylelint</p></li><li><p>color plcker</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex的学习与使用</title>
      <link href="/2020/05/07/vuex%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/07/vuex%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于vue-cli的关于VueX的练习</p></blockquote><h2 id="1-Vuex的核心概念"><a href="#1-Vuex的核心概念" class="headerlink" title="1 Vuex的核心概念"></a>1 Vuex的核心概念</h2><blockquote><p>Vuex中 的主要核心概念如下：</p></blockquote><ul><li>State：唯一数据源</li><li>Mutation：通过函数，改变数据源</li><li>Action：异步操作</li><li>Getter：类似于管道</li><li>modules: Vuex 允许我们将 store 分割成<strong>模块</strong></li></ul><h3 id="1-1-State"><a href="#1-1-State" class="headerlink" title="1.1 State"></a>1.1 State</h3><blockquote><p>State提供唯一的公共数据源，所有共享的数据都要统一放到State中进行存储</p></blockquote><h4 id="1-1-1-定义State"><a href="#1-1-1-定义State" class="headerlink" title="1.1.1 定义State"></a>1.1.1 定义State</h4><ul><li>创建store数据源，提供唯一公共数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-1-2-访问State中的数据"><a href="#1-1-2-访问State中的数据" class="headerlink" title="1.1.2 访问State中的数据"></a>1.1.2 访问State中的数据</h4><ul><li><p>组件访问State中数据的第一种方式</p><ul><li><blockquote><p>子组件通过this.$store访问数据</p></blockquote></li><li><p>组件直接通过this.$store访问数据</p><ul><li>基本格式：<code>this.$store.state.全局数据名称</code></li></ul></li></ul></li><li><p>组件访问State中数据的第二种方式</p><ul><li><blockquote><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余，为了解决这个问题，我们可以使用mapState辅助函数帮助我们生成计算属性。</p></blockquote></li><li><p>从vuex中按需导入mapState函数</p><ul><li>导入mapState函数：<code>import { mapState } from &#39;vuex&#39;</code></li></ul></li><li><p>将全局数据， 映射为当前组件的计算属性</p><ul><li><p>映射为计算机属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.count</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-2-Mutation"><a href="#1-2-Mutation" class="headerlink" title="1.2 Mutation"></a>1.2 Mutation</h3><blockquote><p>Mutation用于变更Store中的数据 </p></blockquote><h4 id="1-2-1-定义Mutation"><a href="#1-2-1-定义Mutation" class="headerlink" title="1.2.1 定义Mutation"></a>1.2.1 定义Mutation</h4><ul><li><p>只能通过mutation变更Store数据，不可以直接操作Store中的数据</p></li><li><p>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</p><ul><li><p>定义Mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutation: &#123;</span><br><span class="line">        <span class="comment">// 可以在触发mutations的时候传递参数</span></span><br><span class="line">        add(state) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-2-2-调用mutations的方法"><a href="#1-2-2-调用mutations的方法" class="headerlink" title="1.2.2 调用mutations的方法"></a>1.2.2 调用mutations的方法</h4><blockquote><p>通过调用中心定义的mutations的方法，进而来改变数据，也只有mutations中的函数有权利修改state中的数据</p></blockquote><ul><li><p>触发mutations的第一种方法</p><ul><li><p>基本格式：<code>this.$store.commit(&#39;add&#39;)</code></p></li><li><p>在触发mutations时传递参数</p><ul><li><p>定义mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addN(state, step) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle2 () &#123;</span><br><span class="line">        <span class="comment">// 在调用commit函数</span></span><br><span class="line">        <span class="comment">// 触发 mutation 时携带参数</span></span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'addN'</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>触发mutations的第二种方式</p><ul><li><p>从vuex中按需导入 mapMutations 函数</p><ul><li>导入mapMutations函数：<code>import { mapMutations } from &#39;vuex&#39;</code></li></ul></li><li><p>将所需要的mutations函数，映射为当前组件的methods方法</p><ul><li><p>映射为methods方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methosd: &#123;</span><br><span class="line">    ...mapMutations([<span class="string">'add'</span>, <span class="string">'addN'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>触发mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实参中，只需要输入另外的，不在仓库中定义的值</span></span><br><span class="line"><span class="keyword">this</span>.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-3-Action"><a href="#1-3-Action" class="headerlink" title="1.3 Action"></a>1.3 Action</h3><blockquote><p> Action用于处理异步任务</p><p>如果通过异步操作改变数据，必须通过Action,而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据</p></blockquote><h4 id="1-3-1-定义Action"><a href="#1-3-1-定义Action" class="headerlink" title="1.3.1 定义Action"></a>1.3.1 定义Action</h4><ul><li><p>在Action中定义异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 传入一个形参，用于调用commit等方法</span></span><br><span class="line">        addAsync(context) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 在action中，不能直接修改state中的数据，必须通过context.commit调用mutations中定义的函数</span></span><br><span class="line">                <span class="comment">// commit只能调用mutations中的函数</span></span><br><span class="line">                context.commit(<span class="string">'add'</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-2-触发Action的方法"><a href="#1-3-2-触发Action的方法" class="headerlink" title="1.3.2 触发Action的方法"></a>1.3.2 触发Action的方法</h4><ul><li><p>触发actions的第一种方式</p><ul><li><p>基本格式：<code>this.$store.dispatch(&#39;addAsync &#39;)</code></p></li><li><p>在触发actions异步任务的时候传递参数</p><ul><li><p>定义action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addN(state, step) &#123;</span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        addNAsync(context, step)&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            context.commit(<span class="string">'addN'</span>,step)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发actions的时候携带参数</span></span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'addNAsync'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>触发actions的第二种方式</p><ul><li><p>从vuex中按需导入mapActions函数</p><ul><li>导入mapActions函数：<code>import { mapActions } from &#39;vuex&#39;</code></li></ul></li><li><p>通过导入的mapActions函数，将需要的actons函数，映射为当前组件的methods方法</p><ul><li><p>映射为methods方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">...mapActions([&#39;addNAsync&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>触发actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实参中，只需要输入另外的，不在仓库中定义的值</span></span><br><span class="line"><span class="keyword">this</span>.addNAsync(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-4-Getter"><a href="#1-4-Getter" class="headerlink" title="1.4 Getter"></a>1.4 Getter</h3><blockquote><p>Getter用于对Store中的数据进行加工处理形成新的数据</p><p>Getter可以对Store总已有的数据进行加工处理之后形成新的数据，类似Vue的计算属性</p><p>Store中数据发生变化的时候，Getter的数据也会跟着变化</p></blockquote><h4 id="1-4-1-定义Getter"><a href="#1-4-1-定义Getter" class="headerlink" title="1.4.1 定义Getter"></a>1.4.1 定义Getter</h4><ul><li><p>在getters中定义加工函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters : &#123;</span><br><span class="line">        showNum: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'当前最新的数量是['</span>+ state.count +<span class="string">']'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-使用getter的方法"><a href="#1-4-2-使用getter的方法" class="headerlink" title="1.4.2 使用getter的方法"></a>1.4.2 使用getter的方法</h4><ul><li><p>使用getter的第一种方法</p><ul><li>基本格式：<code>this.$store.getters.名称</code></li></ul></li><li><p>使用getter的第二种方式</p><ul><li><p>从vuex中按需导入mapGetters函数</p><ul><li>导入mapGetters函数：<code>import { mapGetters } from &#39;Vuex&#39;</code></li></ul></li><li><p>通过导入的mapGetters函数，将需要的getter函数，映射为当前组件的computed属性</p><ul><li><p>映射为computed属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'showNum'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.showNum</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="2-基于Vuex的小案例"><a href="#2-基于Vuex的小案例" class="headerlink" title="2 基于Vuex的小案例"></a>2 基于Vuex的小案例</h2><blockquote><p>Todos备忘录小案例</p></blockquote><h3 id="2-1-初始化项目"><a href="#2-1-初始化项目" class="headerlink" title="2.1 初始化项目"></a>2.1 初始化项目</h3><h4 id="2-1-1-基于vue-cli创建项目"><a href="#2-1-1-基于vue-cli创建项目" class="headerlink" title="2.1.1 基于vue cli创建项目"></a>2.1.1 基于vue cli创建项目</h4><ul><li>通过vue ui命令打开可视化面板<ul><li>必须的项目配置<ul><li>vuex</li></ul></li></ul></li></ul><h4 id="2-1-2-安装依赖"><a href="#2-1-2-安装依赖" class="headerlink" title="2.1.2 安装依赖"></a>2.1.2 安装依赖</h4><ul><li>安装vuex依赖包<ul><li>运行依赖<ul><li>axios</li><li>ant-design-vue</li></ul></li></ul></li></ul><h4 id="2-1-3-实现Todos基本布局"><a href="#2-1-3-实现Todos基本布局" class="headerlink" title="2.1.3 实现Todos基本布局"></a>2.1.3 实现Todos基本布局</h4><ul><li>基于已有的样式模板<ul><li>根据vue-todos文档修改内容</li></ul></li></ul><h4 id="2-1-4-示例"><a href="#2-1-4-示例" class="headerlink" title="2.1.4 示例"></a>2.1.4 示例</h4><ul><li><p>过程、备注见源码内容。</p></li><li><p>源码：<a href="https://github.com/Abell99/my_vuex_todos" target="_blank" rel="noopener">https://github.com/Abell99/my_vuex_todos</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo-GitHub建立的个人博客踩坑纪要</title>
      <link href="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/"/>
      <url>/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://juejin.im/post/5e9b3e87e51d4546d439834a#heading-18" target="_blank" rel="noopener">彻底搞懂如何使用Hexo+GitHubPages搭建个人博客</a></li></ul><p>个人博客网站：</p><ul><li><a href="https://www.abel.run/" target="_blank" rel="noopener">https://www.abel.run/</a></li></ul><p>搭建前提准备：</p><ul><li>node环境</li><li>GitHub账号</li><li>安装有git，并配置了用户以及ssh密钥</li></ul><blockquote><p>大致流程为：</p><p>在GitHub上面初始化一个仓库，开放master主干为GitHub Pages的源文件，复制该仓库的ssh地址。在本地通过初始化hexo根目录，并安装所需依赖，配置_config.yml文件，安装hexo提供的上传插件，生成博客并上g传到GitHub上面</p></blockquote><h2 id="0-记录点不同"><a href="#0-记录点不同" class="headerlink" title="0.记录点不同"></a>0.记录点不同</h2><blockquote><p>大致的流程都在参考文章有了详细的描述，这里只记录自己根据参考文章实现的过程中遇到的一些小的坑</p></blockquote><h3 id="一-关于-config-yml的配置"><a href="#一-关于-config-yml的配置" class="headerlink" title="一.关于_config.yml的配置"></a>一.关于_config.yml的配置</h3><blockquote><p>这里只记录配置第一次博客上传的要点</p></blockquote><h4 id="1-上传地址的配置"><a href="#1-上传地址的配置" class="headerlink" title="1.上传地址的配置"></a>1.上传地址的配置</h4><blockquote><p>上传地址的配置关系着能否准确的连接仓库完成上传指令</p></blockquote><p>以下是我的上传配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Abell99/Abell99.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h5 id="1-1repo的准确获取"><a href="#1-1repo的准确获取" class="headerlink" title="1.1repo的准确获取"></a>1.1repo的准确获取</h5><ul><li>找到目标仓库</li><li>使用ssh连接</li><li>复制上传地址</li></ul><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042501.png" alt="复制上传地址"></p><h4 id="2-css样式的地址配置"><a href="#2-css样式的地址配置" class="headerlink" title="2.css样式的地址配置"></a>2.css样式的地址配置</h4><blockquote><p>因为上传到仓库后，引用地址发生改变，因此我们需要配置基准地址，以确保在上传至仓库后，css样式得以完整的显示</p></blockquote><p>以下是我的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https:<span class="comment">//abell99.github.io</span></span><br><span class="line">root: <span class="regexp">/Abell99/</span></span><br></pre></td></tr></table></figure><p>细节：url为网址，root为仓库名，区分大小写，url地址最后不跟“/”，而root要使用“/”包住</p><p>注意：url,root并非必须设置成这样，可根据资源所在位置进行调整。</p><h5 id="2-1url地址的获取"><a href="#2-1url地址的获取" class="headerlink" title="2.1url地址的获取"></a>2.1url地址的获取</h5><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042502.png" alt="精准获取url1"></p><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042503.png" alt="精准获取url2"></p><ul><li>打开仓库设置界面</li><li>找到GitHub Pages下提供的url地址</li></ul><h3 id="二-新建文章以及图片显示问题"><a href="#二-新建文章以及图片显示问题" class="headerlink" title="二.新建文章以及图片显示问题"></a>二.新建文章以及图片显示问题</h3><blockquote><p>默认的新建文章是不配对应的图片文件的，需要安装插件</p></blockquote><h4 id="1-配置-config-yml"><a href="#1-配置-config-yml" class="headerlink" title="1.配置_config.yml"></a>1.配置_config.yml</h4><ul><li>post_asset_folder的值设为true</li></ul><h4 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h4><ul><li><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li></ul><h4 id="3-修改插件内容"><a href="#3-修改插件内容" class="headerlink" title="3.修改插件内容"></a>3.修改插件内容</h4><ul><li>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-引入方法"><a href="#4-引入方法" class="headerlink" title="4.引入方法"></a>4.引入方法</h4><p>图示文件地址目录结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如何在博客文档中插入图片</span><br><span class="line">---图片<span class="number">1.</span>jpg</span><br><span class="line">如何在博客文档中插入图片.md</span><br></pre></td></tr></table></figure><ul><li>使用<code>![描述文字](如何在博客文档中插入图片\图片1.jpg)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑纪要 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
