<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序基础部分的学习笔记</title>
      <link href="/2020/05/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://developers.weixin.qq.com/doc/" target="_blank" rel="noopener">微信官方文档</a></li></ul><h3 id="小程序基础知识初探"><a href="#小程序基础知识初探" class="headerlink" title="小程序基础知识初探"></a>小程序基础知识初探</h3><h3 id="1-小程序的原生框架"><a href="#1-小程序的原生框架" class="headerlink" title="1 小程序的原生框架"></a>1 小程序的原生框架</h3><blockquote><p>微信小程序开发团队将小程序的原生框架叫做MINA。</p><p>MINA的目标是通过尽可能简单，高效的方式让开发者可以在微信中开发具有原生APP体验的服务。</p></blockquote><h4 id="1-1-小程序结构目录"><a href="#1-1-小程序结构目录" class="headerlink" title="1.1 小程序结构目录"></a>1.1 小程序结构目录</h4><blockquote><p>小程序框架提供了自己的视图层描述语言<code>WXML</code>和<code>WXSS</code>，以及<code>JavaScript</code>,并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑</p></blockquote><ul><li><p>小程序文件结构和传统web对比</p><p>| 结构 | 传统web    | 微信小程序 |<br>| —— | ————— | ————— |<br>| 结构 | HTML       | WXML       |<br>| 样式 | CSS        | WXSS       |<br>| 逻辑 | JavaScript | JavaScript |<br>| 配置 | 无         | JSON       |</p><blockquote><p>传统web是三层结构，而微信小程序是四层结构，多了一层配置.json</p></blockquote></li><li><p>基本的项目目录</p><p><img src="https://pics.images.ac.cn/image/5eba1df114d4c.html" alt="项目目录说明"></p></li></ul><h4 id="1-2-小程序配置文件"><a href="#1-2-小程序配置文件" class="headerlink" title="1.2 小程序配置文件"></a>1.2 小程序配置文件</h4><blockquote><p>小程序 应用程序中，包括最基本的两种配置文件，一种是全局的app.json和页面自己的page.json</p></blockquote><ul><li><p>全局配置 app.json</p><ul><li><p>字段含义</p><ul><li>pages字段——用于描述当前小程序所有的页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录</li><li>window字段——用于小程序所有页面的顶部背景颜色，文字颜色定义等</li><li>完整的配置信息见官网<ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">全局配置中的配置项</a></li></ul></li></ul></li><li><p>示例说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在配置文件中，不能拥有注释，这里只做解释说明使用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="comment">// 页面的顺序决定首页的显示内容 </span></span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">    <span class="comment">// 在小程序开发者工具中，通过在配置文件中添加页面，可以自动生成该页面的基本组成成分</span></span><br><span class="line">    <span class="string">"pages/demo/demo"</span></span><br><span class="line">  ], </span><br><span class="line">  <span class="comment">// 窗口配置</span></span><br><span class="line">  <span class="attr">"window"</span>:&#123; </span><br><span class="line">    <span class="comment">// 下拉 loading 的样式，仅支持 dark / light</span></span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="comment">// 是否开启当前页面下拉刷新。</span></span><br><span class="line">    <span class="attr">"enablePullDownRefresh"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 下拉时，展现出的窗口的背景色</span></span><br><span class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"red"</span>,</span><br><span class="line">   <span class="comment">// 导航栏背景颜色，如 #000000</span></span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="comment">// 导航栏标题文字内容</span></span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="comment">// 导航栏标题颜色，仅支持 black / white</span></span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"black"</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 底部导航栏配置</span></span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="comment">// 底部导航栏的组成为list的数组中的内容</span></span><br><span class="line">    <span class="attr">"list"</span>: [&#123;</span><br><span class="line">      <span class="comment">// 导航栏导向地址</span></span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pagePath"</span>,</span><br><span class="line">      <span class="comment">// 标题</span></span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="comment">// 未被选中的图标</span></span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"iconPath"</span>,</span><br><span class="line">      <span class="comment">// 已经选中的图标</span></span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"selectedIconPath"</span></span><br><span class="line">    &#125;]</span><br><span class="line">      ...底部导航，至少需要两个数组对象</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"v2"</span>,</span><br><span class="line">  <span class="attr">"sitemapLocation"</span>: <span class="string">"sitemap.json"</span></span><br><span class="line">  <span class="comment">// ...具体且全面的属性列表请查看微信开发文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面配置</p><ul><li>为每一个页面配置单独配置全局配置中的window属性 </li></ul></li><li><p>sitemap配置</p><ul><li>用于配置小程序及其页面是否允许被微信索引</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html" target="_blank" rel="noopener">页面索引优化</a></li></ul></li></ul><h3 id="2-小程序的模板语法"><a href="#2-小程序的模板语法" class="headerlink" title="2 小程序的模板语法"></a>2 小程序的模板语法</h3><blockquote><p>WXML是框架设计的一套标签语言，结合基础组件，事件系统，可以构建出页面的结构</p></blockquote><h4 id="2-1-数据绑定"><a href="#2-1-数据绑定" class="headerlink" title="2.1 数据绑定"></a>2.1 数据绑定</h4><ul><li><p>普通写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello MINA!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>绑定到属性中去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;isChecked&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>小细节<ul><li>字符串和花括号之间不能存在空格，否则会导致识别失败</li></ul></li></ul></li></ul><h4 id="2-2-运算"><a href="#2-2-运算" class="headerlink" title="2.2 运算"></a>2.2 运算</h4><ul><li><p>三元运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;flag ? true : false&#125;&#125;"</span>&gt;</span>是否会隐藏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>算数运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; a + b &#125;&#125; + &#123;&#123; c &#125;&#125; + 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        b: <span class="number">2</span>,</span><br><span class="line">        c: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>逻辑判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123; length &gt; 5 &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; "hello" + name &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"word"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-列表渲染"><a href="#2-3-列表渲染" class="headerlink" title="2.3 列表渲染"></a>2.3 列表渲染</h4><ul><li><p><code>wx:for</code></p><ul><li><code>item</code><ul><li>项的变量名默认为<code>item</code></li><li><code>wx:for-item</code> 可以指定数组当前元素的变量名</li></ul></li><li><code>index</code><ul><li>下标变量名默认为<code>index</code></li><li><code>wx:for-index</code> 可以指定数组当前元素下标的变量名</li></ul></li></ul></li><li><p><code>wx:key</code></p><ul><li>用来提升数组渲染的性能</li><li>绑定的值为字符串名称，该字符串的值必须唯一不重复<ul><li>特殊的绑定值:保留字 <code>*this</code>，就表示绑定了循环项</li></ul></li></ul></li><li><p>小细节: 当出现嵌套循环的时候，绑定的属性名不可以重复</p></li><li><p>循环数组示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123; array &#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span> <span class="attr">wx:for-item</span>=<span class="string">"item"</span> <span class="attr">wx:for-index</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">&#123;&#123; index &#125;&#125;: &#123;&#123; item.msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    array: [</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">"a"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">msg</span>: <span class="string">"b"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>循环对象示例</p><blockquote><p>当循环对象的时候，item指向对象的值，index指向对象的属性</p><p>建议修改名称，避免歧义</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;person&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"value"</span> <span class="attr">wx:for-index</span>=<span class="string">"key"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">&#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    person: &#123;</span><br><span class="line">        id: <span class="number">1625</span>,</span><br><span class="line">        name: <span class="string">"abel"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>block</code></p><blockquote><p>渲染一个包含多节点的结构快，block最终不会变成真正的dom元素</p></blockquote></li></ul><h4 id="2-4-条件渲染"><a href="#2-4-条件渲染" class="headerlink" title="2.4 条件渲染"></a>2.4 条件渲染</h4><ul><li><p><code>wx:if</code></p><ul><li><p>判断代码块是否需要渲染</p></li><li><p>if代码块的使用</p><ul><li><code>wx:if</code></li><li><code>wx:elif</code></li><li><code>wx:else</code></li></ul></li></ul></li><li><p><code>wx:hidden</code></p><ul><li>判断代码块是否需要显示</li></ul></li><li><p>使用场景</p><ul><li>当标签频繁的切换显示的时候，使用hidden,反之则使用if</li><li>hidden属性不能同display一起使用，会被覆盖</li></ul></li></ul><h3 id="3-小程序事件的绑定"><a href="#3-小程序事件的绑定" class="headerlink" title="3 小程序事件的绑定"></a>3 小程序事件的绑定</h3><h4 id="3-1-事件类型"><a href="#3-1-事件类型" class="headerlink" title="3.1 事件类型"></a>3.1 事件类型</h4><ul><li><code>bindtap</code>：点击</li><li><code>bindinput</code>： input输入</li><li><code>bindchange</code>： 数值改变</li></ul><h4 id="3-2-操作数值"><a href="#3-2-操作数值" class="headerlink" title="3.2 操作数值"></a>3.2 操作数值</h4><ul><li><code>this.setData</code></li></ul><h4 id="3-3-除value以外的传参"><a href="#3-3-除value以外的传参" class="headerlink" title="3.3 除value以外的传参"></a>3.3 除value以外的传参</h4><ul><li><p>自定义属性传参</p><p><code>data-value=&quot;1&quot;</code></p></li><li><p>通过事件源对象获取参数</p><p><code>e.currentTarget.dataset.operation;</code></p></li><li><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">"handleInput"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    value: <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 绑定的事件</span></span><br><span class="line">    handleInput: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">        <span class="comment">// 赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            value: e.detail.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-小程序的样式书写"><a href="#4-小程序的样式书写" class="headerlink" title="4 小程序的样式书写"></a>4 小程序的样式书写</h3><blockquote><p>WXSS是一套样式语言，用于描述WXML的组件样式</p></blockquote><p>特征：</p><ul><li>响应式长度单位：<code>rpx</code></li><li>样式导入</li></ul><h4 id="4-1-尺寸单位"><a href="#4-1-尺寸单位" class="headerlink" title="4.1 尺寸单位"></a>4.1 尺寸单位</h4><blockquote><p><code>rpx</code> : 可以根据屏幕宽度进行自适应，规定屏幕宽为<code>750px</code>。</p><p>因为微信的独特测量单位，与传统的px不同，因此，如果要根据PS的设计稿设计尺寸，需要 遵从以下步骤：</p></blockquote><ul><li><p>手动计算</p><ul><li>确定设计稿的宽度，设为：pageWidth</li><li>确认比例，<code>750rpx = pageWidth px</code></li><li>根据比例确认<code>rpx</code>值</li></ul></li><li><p>利用<code>calc</code>属性转换</p><ul><li><p><code>css</code>和<code>wxss</code>都支持<code>calc</code>属性，因此可以使用<code>calc</code>转换</p></li><li><p>根据示例，没有空格的地方不允许有多余的空格</p></li><li><p>格式：<code>width:calc(750rpx * 元素尺寸 / pageWidth)</code></p></li><li><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">    <span class="comment">/* 在设计稿为375px情况下，100px的元素在小程序中占多少rpx */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">750</span>rpx * <span class="number">100</span> / <span class="number">375</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>建议：开发微信小程序时使用iPhone6作为视觉参考</p></li></ul><h4 id="4-2-样式导入"><a href="#4-2-样式导入" class="headerlink" title="4.2 样式导入"></a>4.2 样式导入</h4><ul><li><code>wxss</code>直接就支持样式的导入功能，也可以和less中的导入混合使用</li><li>使用<code>@import</code>语句可以导入外联样式表，但是只支持相对路径</li></ul><h4 id="4-3-选择器"><a href="#4-3-选择器" class="headerlink" title="4.3 选择器"></a>4.3 选择器</h4><blockquote><p>特别注意：小程序不支持 <code>*</code> 通配符</p></blockquote><ul><li><p>目前支持的选择器有</p><p>| 选择器           | 样例                | 样例描述                                   |<br>| ———————— | —————————- | ————————————————————— |<br>| .class           | <code>.intro</code>            | 选择所有拥有class=”intro”的组件            |<br>| #id              | <code>#firstname</code>        | 选择拥有id=”firstname”的组件               |<br>| element          | <code>view</code>              | 选择所有view组件                           |<br>| element, element | <code>view, checkbox</code>    | 选择所有文档的view组件和所有的checkbox组件 |<br>| nth-child(n)     | <code>view:nth-child(n)</code> | 选择某个索引的 标签                        |<br>| ::after          | <code>view::after</code>       | 在view组件后面插入内容                     |<br>| ::before         | <code>view::before</code>      | 在view组件前面插入内容                     |</p></li></ul><h4 id="4-4-小程序中使用less"><a href="#4-4-小程序中使用less" class="headerlink" title="4.4 小程序中使用less"></a>4.4 小程序中使用less</h4><blockquote><p>引入插件使原生小程序支持less</p></blockquote><ul><li><p>编辑器为：<code>vscode</code></p></li><li><p>安装插件：<code>easy less</code></p></li><li><p>配置插件</p><ul><li><p><code>settings</code>配置</p></li><li><p>配置内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"less.compile"</span>: &#123;</span><br><span class="line">    <span class="string">"outExt"</span>: <span class="string">".wxss"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>less</code>文件，保存自动生成<code>wxss</code>文件</p></li></ul></li></ul><h3 id="5-小程序的内置组件"><a href="#5-小程序的内置组件" class="headerlink" title="5 小程序的内置组件"></a>5 小程序的内置组件</h3><blockquote><p>重点讲解小程序中常用的布局组件</p></blockquote><h4 id="5-1-view"><a href="#5-1-view" class="headerlink" title="5.1 view"></a>5.1 <code>view</code></h4><ul><li><p>代替原来的<code>div</code>标签</p></li><li><p>增加的属性</p><p>| 属性名                 | 类型    | 默认值 | 说明                                     |<br>| ——————————— | ———- | ——— | ———————————————————— |<br>| hover-class            | string  | none   | 指定按下去的样式类                       |<br>| hover-stop-propagation | boolean | false  | 指定是否阻止本结点的祖先结点出现点击状态 |<br>| hover-start-time       | number  | 50     | 按住后多久出现点击状态                   |<br>| hover-stay-time        | number  | 400    | 手指松开点击状态保留多久                 |</p></li></ul><h4 id="5-2-text"><a href="#5-2-text" class="headerlink" title="5.2 text"></a>5.2 <code>text</code></h4><ul><li><p>文本标签</p></li><li><p>只能嵌套<code>text</code></p></li><li><p>增加属性</p><p>| 属性名     | 类型    | 默认值 | 说明                                               |<br>| ————— | ———- | ——— | ————————————————————————— |<br>| selectable | Boolean | false  | 用户长按该标签可以复制内容，只有该标签拥有这个功能 |<br>| decode     | Boolean | false  | 可以对 <em>空格</em> <em>回车</em>  等 符号 进行编码             |</p></li></ul><h4 id="5-3-image"><a href="#5-3-image" class="headerlink" title="5.3 image"></a>5.3 <code>image</code></h4><ul><li><p>图片标签，默认的宽和高为：320px*240px</p></li><li><p>由于微信对静态文件大小的限制，推荐使用：<a href="https://images.ac.cn/simple.html" target="_blank" rel="noopener">土豆图床</a></p></li><li><p>支持懒加载</p><ul><li>lazy-load 会自己判断，当图片出现在视口上下三屏的高度之内的时候，自己开始加载图片</li></ul></li><li><p>新增属性</p><p>| 属性名    | 类型    | 默认值        | 说明                 |<br>| ————- | ———- | ——————- | —————————— |<br>| src       | String  |               | 图片资源地址         |<br>| mode      | String  | ‘scaleToFill’ | 图片裁剪，缩放的模式 |<br>| lazy-load | Boolean | false         | 图片懒加载           |</p></li><li><p>mode的有效值：</p><p>| 模式 | 值                                                           | 说明                                                      |<br>| —— | —————————————————————————————— | ————————————————————————————- |<br>| 缩放 | scaleToFill                                                  | 不保持纵横比缩放图片，使图片的宽高完全拉伸至填满jmage元素 |<br>| 缩放 | aspectFit                                                    | 保持纵横比缩放图片，使图片的长边能完全显示出来            |<br>| 缩放 | aspectFill                                                   | 保持纵横比缩放图片，只保证图片的短边能完全显示出来        |<br>| 缩放 | widthFix                                                     | 宽度不变，高度自动变化，保持原图宽高比不变                |<br>| 裁剪 | top,<br>bottom,<br>center,<br>left,<br>right,<br>top left,<br>top right,<br> | 不缩放图片，只显示图片的部分区域                          |<br>| 裁剪 | bottom                                                       | 不缩放                                                    |</p></li></ul><h4 id="5-4-swiper"><a href="#5-4-swiper" class="headerlink" title="5.4 swiper"></a>5.4 <code>swiper</code></h4><blockquote><p>微信内置轮播图组件</p></blockquote><ul><li><p><code>swiper</code>：轮播图外层容器 </p></li><li><p><code>swiper-item</code>：每一个轮播项，宽自动占满整行，高由内容撑开</p></li><li><p><code>swiper</code> 拥有默认样式，并且高度无法由内容撑开，因此我们需要设置<code>swiper</code>高度，通过内容图片的高度来计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100%</span><br><span class="line"><span class="selector-tag">height</span>: 150<span class="selector-tag">px</span></span><br></pre></td></tr></table></figure><ul><li><code>swiper</code> 高度的计算<ul><li>公式：<code>swiper</code>的高度/<code>swiper</code>的宽度=原图的高度/原图的宽度<ul><li>height = <code>swiper</code>的宽度*原图的高度/原图的宽度</li></ul></li><li>宽度一般采用<code>vw</code>来表示，根据视口控制图片所占百分比</li></ul></li></ul></li><li><p><code>swiper</code>的标签属性</p><p>| 属性名                 | 类型    | 默认值        | 说明                                         |<br>| ——————————— | ———- | ——————- | —————————————————————— |<br>| indicator-dots         | Boolean | false         | 是否显示面板知识点                           |<br>| indicator-color        | Color   | rgba(0,0,0,3) | 指示点颜色                                   |<br>| indicator-active-color | Color   | #000          | 当前选中的指示点颜色                         |<br>| autoplay               | Boolean | false         | 是否自动切换                                 |<br>| interval               | Number  | 5000          | 自动切换时间间隔                             |<br>| circular               | Boolean | false         | 是否开启循环轮播，用于最后一张和第一张的衔接 |</p></li></ul><h4 id="5-5-navigator"><a href="#5-5-navigator" class="headerlink" title="5.5 navigator"></a>5.5 <code>navigator</code></h4><blockquote><p>导航组件，类似于超链接标签</p><p>块级元素，支持宽高的设定</p></blockquote><ul><li><p><code>navigator</code> 的属性</p><p>| 属性名    | 类型   | 默认值   | 说明                                                         |<br>| ————- | ——— | ———— | —————————————————————————————— |<br>| target    | String | self     | 在哪个目标上发生跳转，默认当前小程序，可选值self/miniProgram |<br>| url       | String |          | 当前小程序内的跳转链接                                       |<br>| open-type | String | navigate | 跳转方式                                                     |</p><ul><li><p>open-type的有效值</p><p>| 值           | 说明                                                         |<br>| —————— | —————————————————————————————— |<br>| navigate     | 保留当前页面，跳转到应用内的某个页面，但是不能跳转到tabbar页面 |<br>| redirect     | 关闭当前页面，跳转到应用内的某个页面，但是不允许跳转到tabbar页面 |<br>| switchTab    | 跳转到tabBar页面，并关闭其他所有非tabBar页面                 |<br>| reLaunch     | 关闭所有页面，打开到应用内的某个页面                         |<br>| navigateBack | 关闭当前页面，返回上一页面或多级页面。可以通过getCurrentPages()获取当前的页面栈，决定需要返回几层 |<br>| exit         | 退出小程序，target=”miniProgram”时生效                       |</p></li></ul></li></ul><h4 id="5-6-rich-text"><a href="#5-6-rich-text" class="headerlink" title="5.6 rich-text"></a>5.6 <code>rich-text</code></h4><blockquote><p>富文本标签</p></blockquote><ul><li><p>可以将字符串解析为对应的标签，类似于vue中的<code>v-html</code>功能</p></li><li><p><code>nodes</code> 属性，根据该属性的接收内容，渲染标签内容</p><ul><li>接收标签字符串<ul><li>例如：<code>&lt;div&gt;助人者，人恒助之&lt;/div&gt;</code></li></ul></li><li>接收对象数组，对象的属性<ul><li>name<ul><li>决定是什么类型的标签</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html" target="_blank" rel="noopener">查看都支持什么标签</a></li></ul></li><li>attres<ul><li>决定标签的属性</li></ul></li><li>children<ul><li>决定子节点的内容，嵌套使用</li></ul></li></ul></li></ul></li><li><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">"&#123;&#123;html&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    html: [</span><br><span class="line">        name: <span class="string">"div"</span>,</span><br><span class="line">        attrs: &#123;</span><br><span class="line">        class: "my_div",</span><br><span class="line">        style: <span class="string">"color: red"</span></span><br><span class="line">        &#125;,</span><br><span class="line">     children: [</span><br><span class="line">     &#123;</span><br><span class="line">     name: <span class="string">"p"</span>,</span><br><span class="line">     attrs: &#123;&#125;,</span><br><span class="line">    children: &#123;</span><br><span class="line">            .....</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ]</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-7-button"><a href="#5-7-button" class="headerlink" title="5.7 button"></a>5.7 <code>button</code></h4><blockquote><p>按钮标签</p></blockquote><ul><li><p><code>button</code> 的属性</p><p>| 属性      | 类型    | 默认值  | 必填 | 说明                                                   |<br>| ————- | ———- | ———- | —— | ——————————————————————————— |<br>| size      | string  | default | 否   | 按钮的大小                                             |<br>| type      | string  | default | 否   | 按钮的样式类型                                         |<br>| plain     | boolean | false   | 否   | 按钮是否镂空，背景色透明                               |<br>| disabled  | boolean | false   | 否   | 是否禁用                                               |<br>| loading   | boolean | false   | 否   | 名称前是否带loading图标                                |<br>| form-type | string  |         | 否   | 用于form组件，点击分别会触发form组件的submit/reset事件 |<br>| open-type | string  |         | 否   | 微信开发能力，超能力                                   |</p><ul><li><p>size的合法值</p><p>| 值      | 说明     |<br>| ———- | ———— |<br>| default | 默认大小 |<br>| mini    | 小尺寸   |</p></li><li><p>type的合法值</p><p>| 值      | 说明 |<br>| ———- | —— |<br>| primary | 绿色 |<br>| default | 白色 |<br>| warn    | 红色 |</p></li><li><p>form-type的合法值</p><p>| 值     | 说明     |<br>| ——— | ———— |<br>| submit | 提交表单 |<br>| reset  | 重置表单 |</p></li></ul></li><li><p>特别说明，关于<a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html" target="_blank" rel="noopener">open-type</a> </p><ul><li><p><code>open-type</code>的合法值</p><p>| 值             | 说明                                                         |<br>| ——————— | —————————————————————————————— |<br>| contact        | 打开客服会话，如果用户在会话中点击消息卡片后返回小程序，可以从bindcontact回调中获得具体消息，需真机调试 |<br>| share          | 触发用户转发，需真机调试                                     |<br>| getPhoneNumber | 获取用户手机，可以从bindgetphonenumber回调中获取到用户信息   |<br>| getUserInfo    | 获取用户信息，可以从bindgetuserinfo回调中获取到用户信息      |<br>| launchApp      | 打开APP，可以通过app-parameter属性设定向APP传的参数，需真机调试 |<br>| openSetting    | 打开授权设置页                                               |<br>| feedback       | 打开”意见反馈“页面，用户可以提交反馈内容并上传日志，开发者可以登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">小程序管理后台</a>查看，需真机调试 |</p></li><li><p><code>contact</code> </p><ul><li>作用：直接打开客服对话功能</li><li>前提：非测试号。需要在微信小程序的后台配置，添加客服，并使用真机调试</li><li><img src="https://pics.images.ac.cn/image/5eb973aa42ee5.html" alt="添加客服"></li></ul></li><li><p><code>getPhoneNumber</code> </p><ul><li>作用：获取当前用户的手机号码信息</li><li>前提：需为企业的小程序账号，才有权限获取用户的手机号码</li><li>方法：<ul><li>绑定事件: <code>bindgetphonenumber</code></li><li>在事件的回调函数中，通过参数来获取信息</li><li>获取信息为加密信息，通过小程序的后台服务器，进行解析再返</li></ul></li></ul></li><li><p><code>launchApp</code></p><ul><li><p>作用：请求打开本机上装的APP</p></li><li><p>前提：</p><ul><li><p>APP和小程序为同一人认证的开放平台账号</p></li><li><p>APP接入微信终端SDK</p></li></ul></li><li><p>方法：</p><ul><li><p>通过 open-type 属性值设置为 launchApp 的 组件</p></li><li><p>设置 app-parameter 传递的参数</p></li></ul></li></ul></li></ul></li></ul><h4 id="5-7-icon"><a href="#5-7-icon" class="headerlink" title="5.7 icon"></a>5.7 <code>icon</code></h4><blockquote><p>图标</p></blockquote><ul><li><p><code>icon</code> 的属性</p><p>| 属性  | 类型          | 默认值 | 必填 | 说明                                                         |<br>| ——- | ——————- | ——— | —— | —————————————————————————————— |<br>| type  | string        |        | 是   | icon的类型，有效值：success,success_no_circle,info,warn,waiting,cancel |<br>| size  | number/string | 23     | 否   | icon的大小                                                   |<br>| color | string        |        | 否   | icon的颜色，同css的color                                     |</p></li></ul><h4 id="5-8-radio"><a href="#5-8-radio" class="headerlink" title="5.8 radio"></a>5.8 <code>radio</code></h4><blockquote><p>单选框</p></blockquote><ul><li><p><code>radio</code> 的属性</p><p>| 属性  | 类型   | 必填 | 说明                     |<br>| ——- | ——— | —— | ———————————— |<br>| color | string | 否   | 按钮颜色                 |<br>| value | string | 是   | 选中时候，传给父组件的值 |</p></li><li><p>搭配父元素 <code>radio-group</code> 来使用，并且需要给radio-group绑定change事件才能让选项生效，记录，通过数据源对象的detail属性获取</p></li></ul><h4 id="5-9-checkbox-group"><a href="#5-9-checkbox-group" class="headerlink" title="5.9 checkbox-group"></a>5.9 <code>checkbox-group</code></h4><blockquote><p>复选框</p></blockquote><ul><li><p><code>checkbox</code> 的内容渲染使用<strong>数组循环渲染</strong>为佳</p></li><li><p>数组组成示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">0</span>,</span><br><span class="line">                name: <span class="string">"🍉"</span>,</span><br><span class="line">                value: <span class="string">"watermelon"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"🍓"</span>,</span><br><span class="line">                value: <span class="string">"strawberry"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>搭配父元素 <code>radio-group</code> 来使用，并且需要给radio-group绑定change事件才能让选项生效，记录，通过数据源对象的detail属性获取</p></li></ul><h3 id="6-自定义组件"><a href="#6-自定义组件" class="headerlink" title="6 自定义组件"></a>6 自定义组件</h3><blockquote><p>类似于vue或者react中的自定义组件</p></blockquote><h4 id="6-1-如何创建自定义组件"><a href="#6-1-如何创建自定义组件" class="headerlink" title="6.1 如何创建自定义组件"></a>6.1 如何创建自定义组件</h4><blockquote><p>类似于创建页面 ，但是创建的是Component，一个自定义组件由<code>json</code>,<code>wxml</code>,<code>wxss</code>,<code>js</code>4个文件组成</p></blockquote><ul><li><p>在微信开发者工具中搭建目录结构，快速创建组件的文件结构</p><p><img src="https://pics.images.ac.cn/image/5eba1b9ac3702.html" alt="自定义组件"></p></li><li><p>在/components的文件夹下，根据所需自定义的组件名，来命名组件文件夹，然后再通过新建<code>Component</code>来自动生成自定义组件的文件组成部分</p></li></ul><h4 id="6-2-如何搭建自定义组件"><a href="#6-2-如何搭建自定义组件" class="headerlink" title="6.2 如何搭建自定义组件"></a>6.2 如何搭建自定义组件</h4><blockquote><p>这里我们通过搭建一个名为Tabs的组件记录搭建过程</p></blockquote><ul><li><p>声明组件</p><ul><li><p>需要在<strong>组件</strong>的<code>json</code>文件中进行自定义组件声明<code>Tabs.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"component"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<strong>需要调用该组件的页面</strong>的<code>json</code>文件中声明使用<code>Tabs.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">        <span class="string">"Tabs"</span>: <span class="string">"../../components/Tabs/Tabs"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在调用过该组件的页面，直接使用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabsr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改组件内容</p><ul><li><p>根据需求更改搭建组件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/Tabs/Tabs.wxml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义组件：tabs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标题区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabs_title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">wx:for</span>=<span class="string">"&#123;&#123; tabs &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">wx:key</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"title_item &#123;&#123; item.isActive? 'active' : '' &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtap</span>=<span class="string">"hanldeItemTap"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabs_content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是内容区域，会根据标题的改变而改变 </span></span><br><span class="line"><span class="comment">solt标签，其实就是一个占位符插槽，等到父组件调用子组件的时候，再传递标签过来，最终这些传递的标签就会替代slot插槽的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>利用组件的两个要点，参数的传递</p><ul><li><p>父传子</p><ul><li><p>通过属性传递,在父组件定义数据，传递给子组件的自定义属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   * 这里面存放的是要从父组件中接收的数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    <span class="comment">// 要接收的数据</span></span><br><span class="line">    tabs: &#123;</span><br><span class="line">      <span class="comment">// type 要接收的数据的类型</span></span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="comment">// value 默认值</span></span><br><span class="line">      value: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子传父</p><ul><li><p>通过函数方法传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">// 在子组件中正常调用该方法</span></span><br><span class="line">    hanldeItemTap (e) &#123;</span><br><span class="line">        <span class="comment">// 触发父组件中的自定义事件，同时传递数据给父组件</span></span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">"itemChange"</span>,&#123;index&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>父组件通过绑定事件到子组件的自定义方法来操作数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义方法，前面需要加上触发方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> <span class="attr">binditemChange</span>=<span class="string">"hanldeItemChange"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>根据标签改变内容</p><ul><li><p>插槽，if-elif-else的运用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> <span class="attr">binditemChange</span>=<span class="string">"hanldeItemChange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;tabs[0].isActive&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;tabs[1].isActive&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;tabs[2].isActive&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>逻辑分析</p><blockquote><p>封装并使用一个组件</p><ol><li><p>创建组件,搭建组件的基本样式，基本结构</p></li><li><p>组件的内容渲染，数据应该由父组件传递到子组件，通过自定义属性</p></li><li>在父组件中操作的时候，无法直接在子组件中调用方法改变数据，因为数据来自于父组件，这里我们通过自定义方法，调用父组件中的方法来改变父组件中的数据</li><li>根据标题的改变，改变内容，子组件预留插槽占位符，父组件根据标签选中，利用if-elif-else来渲染页面</li></ol></blockquote></li></ul><h4 id="6-3-组件的字段定义与示例方法"><a href="#6-3-组件的字段定义与示例方法" class="headerlink" title="6.3 组件的字段定义与示例方法"></a>6.3 组件的字段定义与示例方法</h4><blockquote><p><code>Component</code> 构造器可用于定义组件，调用<code>Component</code> 构造器时可以指定组件的属性，数据，方法等</p></blockquote><div class="table-container"><table><thead><tr><th>定义段</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>properties</td><td>Object Map</td><td>否</td><td>组件的对外属性，是属性名到属性设置的映射表</td></tr><tr><td>data</td><td>Object</td><td>否</td><td>组件的内部数据，和<code>properties</code> 一同用于组件的模板渲染</td></tr><tr><td>observers</td><td>Object</td><td>否</td><td>组件数据字段监听器，用于监听properties和data的变化，<a href="https://developers.weixin.qq.com/miniprogram/dev/extended/utils/computed.html" target="_blank" rel="noopener">官网示例</a></td></tr><tr><td>methods</td><td>Object</td><td>否</td><td>组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用</td></tr><tr><td>created</td><td>Function</td><td>否</td><td>组件生命周期函数，在组件实例刚刚被创建时执行，注意此时不能调用</td></tr><tr><td>attached</td><td>Function</td><td>否</td><td>组件生命周期函数，在组件实例进入页面节点树时执行</td></tr><tr><td>ready</td><td>Function</td><td>否</td><td>组件生命周期函数，在组件布局完成后执行</td></tr><tr><td>moved</td><td>Function</td><td>否</td><td>组件生命周期函数，在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td>detached</td><td>Function</td><td>否</td><td>组件生命周期函数，在组件实例被从页面节点树移除时执行</td></tr></tbody></table></div><h3 id="7-小程序的生命周期"><a href="#7-小程序的生命周期" class="headerlink" title="7 小程序的生命周期"></a>7 小程序的生命周期</h3><blockquote><p>小程序的生命周期分为应用生命周期和页面生命周期</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html" target="_blank" rel="noopener">运行机制</a></p></blockquote><h4 id="7-1-应用生命周期"><a href="#7-1-应用生命周期" class="headerlink" title="7.1 应用生命周期"></a>7.1 应用生命周期</h4><blockquote><p>小程序入口文件app.js</p></blockquote><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>function</td><td></td><td>否</td><td>监听小程序初始化/启动</td></tr><tr><td>onShow</td><td>function</td><td></td><td>否</td><td>监听小程序启动或切前台/展现页面的时候</td></tr><tr><td>onHide</td><td>function</td><td></td><td>否</td><td>监听小程序切后台/隐藏页面</td></tr><tr><td>onError</td><td>function</td><td></td><td>否</td><td>错误监听函数/错误收集</td></tr><tr><td>onPageNotFound</td><td>function</td><td></td><td>否</td><td>页面不存在监听函数</td></tr></tbody></table></div><h4 id="7-2-页面生命周期"><a href="#7-2-页面生命周期" class="headerlink" title="7.2 页面生命周期"></a>7.2 页面生命周期</h4><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object</td><td>页面的初始数据</td></tr><tr><td>onLoad</td><td>function</td><td>生命周期回调——监听页面加载</td></tr><tr><td>onShow</td><td>function</td><td>生命周期回调——监听页面显示</td></tr><tr><td>onReady</td><td>function</td><td>生命周期回调——监听页面初始渲染完成</td></tr><tr><td>onHide</td><td>function</td><td>生命周期回调——监听页面隐藏/跳转</td></tr><tr><td>onUnload</td><td>function</td><td>生命周期回调——监听页面装卸/关闭当前页跳转</td></tr><tr><td>onPullDownRefresh</td><td>function</td><td>监听用户下拉动作(<strong>需开启允许下拉刷新</strong>),用于刷新</td></tr><tr><td>onReachBottom</td><td>function</td><td>页面上拉触底事件的处理函数,用于加载数据或提示已触底</td></tr><tr><td>onShellAppMessage</td><td>function</td><td>用户点击右上角转发</td></tr><tr><td>onPageScroll</td><td>function</td><td>页面滚动触发事件的处理函数</td></tr><tr><td>onResize</td><td>function</td><td>页面尺寸改变时触发，用于横竖屏分屏切换的时候(需开启<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html" target="_blank" rel="noopener">屏幕旋转支持</a>)</td></tr><tr><td>onTabltemTap</td><td>function</td><td>当前页时tab页时，点击自己中tab选项时才能触发</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于VS Code的学习笔记</title>
      <link href="/2020/05/10/%E5%85%B3%E4%BA%8EVS-Code%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/10/%E5%85%B3%E4%BA%8EVS-Code%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工欲善其事必先利其器</p><p>关于vscode的学习笔记</p></blockquote><h2 id="1-Command-Palette命令面板"><a href="#1-Command-Palette命令面板" class="headerlink" title="1 Command Palette命令面板"></a>1 Command Palette命令面板</h2><ul><li><p>命令面板：<code>Ctrl+Shift+P</code></p><ul><li>可以快速打开命令面板，命令面板可以执行各种命令</li><li>面板命令为模糊查询，记住关键词即可  </li><li>常用的命令，有快捷键的优先使用快捷键<ul><li><code>Minimap</code>：缩略图</li></ul></li></ul></li><li><p>快捷键：</p><ul><li><code>Ctrl+k,Ctrl+M</code>：快捷键的映射，通过安装扩展，可以使用之前熟悉的软件的快捷键</li><li><code>Ctrl+k,Ctrl+S</code>：在编辑器中查看所有的快捷键<ul><li>当安装扩展后，可能会发生快捷键冲突，可以在这里查询并更改</li></ul></li><li><code>Ctrl+K,Ctrk+R</code>：打开网址<ul><li><a href="https://files.cnblogs.com/files/skyraker/VSCODE_%E5%BF%AB%E6%8D%B7%E9%94%AE.7z" target="_blank" rel="noopener">网上搜罗到的有中文对照的快捷键图例，点击下载</a></li></ul></li></ul></li><li><p>常用快捷键</p><ul><li><code>Ctrl+B</code>：侧边栏的显示与隐藏</li><li><p><code>Ctrl+P</code>：将允许您通过键入其他名称导航到任何文件或符号</p></li><li><p><code>Ctrl+Shift+Tab</code>：将循环浏览最后一组打开的文件</p></li><li><code>Ctrl+Shift+O</code>：将允许您导航到文件中的特定符号</li><li><code>Ctrl+G</code>：将允许您导航到文件中的特定行</li><li>Ctrl+`：可以查看程序输出、调试输出、问题输出和终端命令<ul><li>Ctrl+Shift+`：新建终端</li></ul></li><li><code>Ctrl+K之后Ctrl+T</code>：开启主题切换，回车确认主题的更改<ul><li>更多主题：扩展中搜索<code>theme</code></li><li>自定义配置：见视图配置项<code>Settings</code></li></ul></li></ul></li></ul><h2 id="2-编辑器视图的控制"><a href="#2-编辑器视图的控制" class="headerlink" title="2 编辑器视图的控制"></a>2 编辑器视图的控制</h2><ul><li><p>编辑器视图，单击文件就可以在编辑器中打开视图，可以同时打开多个文件以不同的方式。</p></li><li><p>可以对编辑器进行配置，例如：字体，颜色，字号登等</p><ul><li>命令：<code>&gt;Open Settings (UI)</code> || <code>&gt;Open Settings (JSON)</code></li></ul></li></ul><h2 id="3-VS-Code基本代码编写"><a href="#3-VS-Code基本代码编写" class="headerlink" title="3  VS Code基本代码编写"></a>3  VS Code基本代码编写</h2><blockquote><p>小细节：</p><ul><li>打开文件单击与双击的区别。单击为浏览状态，单击其他文件的时候会被替换。</li></ul></blockquote><h3 id="3-1-快捷键"><a href="#3-1-快捷键" class="headerlink" title="3.1 快捷键"></a>3.1 快捷键</h3><ul><li><p>最常用的快捷键列表如下</p><p>| 快捷键        | 意义       |<br>| ——————- | ————— |<br>| Ctrl+P        | 浏览文件   |<br>| Ctrl+Shift+F  | 查找       |<br>| Ctrl+W        | 关闭文件   |<br>| Ctrl+/        | 注释       |<br>| Shift+Alt+A   | 块注释     |<br>| Shift+Alt+F   | 格式化文档 |<br>| Ctrl+K,Ctrl+F | 格式化选中 |<br>| Ctrl+Shift+K  | 删除行     |<br>|               |            |</p></li></ul><h3 id="3-2-选择多行"><a href="#3-2-选择多行" class="headerlink" title="3.2 选择多行"></a>3.2 选择多行</h3><ul><li><p><code>Alt+click</code> || <code>Ctrl+Alt+按住滑轮上下滑动</code> ：插入多个光标</p></li><li><p><code>Ctrl+D</code>：选择相同的word</p></li></ul><h2 id="4-VS-Code扩展市场"><a href="#4-VS-Code扩展市场" class="headerlink" title="4 VS Code扩展市场"></a>4 VS Code扩展市场</h2><blockquote><p>VS Code之所以强大，就是因为可以添加扩展，并且扩展丰富，好用</p></blockquote><p>4.1 使用VS Code扩展</p><ul><li><p>浏览扩展</p></li><li><p>安装扩展</p></li><li><p>扩展详细</p></li><li><p>过滤扩展</p></li><li><p>排序扩展</p></li><li><p>搜索扩展</p></li><li><p>管理扩展</p><ul><li><p>安装</p></li><li><p>装卸</p></li><li>启用</li><li>禁用</li></ul></li><li><p>扩展分类</p></li><li><p>更新扩展</p></li></ul><h2 id="5-VS-Code-代码补全-IntelliSense"><a href="#5-VS-Code-代码补全-IntelliSense" class="headerlink" title="5 VS Code 代码补全(IntelliSense)"></a>5 VS Code 代码补全(IntelliSense)</h2><blockquote><p>VS Code的代码补全功能依赖各种扩展，例如：java、Python、Go、C#等等，IntellSense可以实现代码补全，内容辅助，代码提示等功能</p></blockquote><ul><li>安装所需扩展</li><li>输入代码按Tab或者Enter来实现代码补全</li></ul><h2 id="6-VS-Code-代码导航"><a href="#6-VS-Code-代码导航" class="headerlink" title="6 VS Code 代码导航"></a>6 VS Code 代码导航</h2><h3 id="6-1-快速文件导航"><a href="#6-1-快速文件导航" class="headerlink" title="6.1 快速文件导航"></a>6.1 快速文件导航</h3><blockquote><p>VS Code可以快速在文件之间进行导航</p></blockquote><ul><li><code>Ctrl+P</code>：快速打开文件</li><li><code>Ctrl+Tab</code>：已打开的文件中循环切换</li></ul><h3 id="6-2-跳转到文件定义处"><a href="#6-2-跳转到文件定义处" class="headerlink" title="6.2 跳转到文件定义处"></a>6.2 跳转到文件定义处</h3><ul><li><code>F12</code>：可以跳转到文件定义的地方，同：<code>Ctrl+Alt+Click</code></li><li><code>Ctrl+鼠标经过</code>：可以显示帮助信息，告诉我们文件定义的地方在哪里</li><li><code>Ctrl+Shift+O</code>：跳转到Symbol(方法或者变量)，如果文件很大，方法很多的时候可以使用它</li></ul><h3 id="6-3-Peek"><a href="#6-3-Peek" class="headerlink" title="6.3 Peek"></a>6.3 Peek</h3><ul><li><code>Shift+F12</code>：Peek可以嵌入在当前页面进行浏览，这样可以很方便，也可以右键点击选择Peek</li></ul><h3 id="6-4-括号匹配"><a href="#6-4-括号匹配" class="headerlink" title="6.4 括号匹配"></a>6.4 括号匹配</h3><ul><li><code>Ctrl+Shift+\</code>：如果一个方法内容很多，并且有很多方法，使用该快捷键，可以很容易的判断每一个方法的内容区域</li></ul><h2 id="7-VS-Code-代码重构"><a href="#7-VS-Code-代码重构" class="headerlink" title="7 VS Code 代码重构"></a>7 VS Code 代码重构</h2><blockquote><p>源代码重构可以通过重构代码而不用修改运行时行为来提高项目的质量和可维护性，VS Code支持重构操作，例如：Extract Method和Extract Varlable,以改善编辑器中的代码库</p></blockquote><h3 id="7-1-重构代码"><a href="#7-1-重构代码" class="headerlink" title="7.1 重构代码"></a>7.1 重构代码</h3><blockquote><p>重构代码，根据右键选择的不同内容，有不同的重构选择</p></blockquote><ul><li>选择一个完整的方法，可以重构到新的文件中</li><li><p>选择一个return的输出</p><ul><li>重构为一个内部的声明变量</li><li>重构为闭包</li><li>重构为全局变量</li></ul></li><li><p>等等….</p></li></ul><p>…重构有风险，忍住欲望，不要试图重构你不理解的代码。</p><h3 id="7-2-重命名symbol"><a href="#7-2-重命名symbol" class="headerlink" title="7.2 重命名symbol"></a>7.2 重命名symbol</h3><ul><li><code>F2</code>：可以选择符号，例如变量名，方法函数名等等，进行批量重命名</li></ul><h2 id="8-VS-Code-代码调试"><a href="#8-VS-Code-代码调试" class="headerlink" title="8 VS Code 代码调试"></a>8 VS Code 代码调试</h2><blockquote><p>VS Code的一个关键功能就是其出色的调试支持，VS Code的内置调试器有助于加速编辑，编译和调试循环</p></blockquote><h3 id="8-1-调试扩展"><a href="#8-1-调试扩展" class="headerlink" title="8.1 调试扩展"></a>8.1 调试扩展</h3><blockquote><p>VS Code具有对Node.js运行时的内置调制支持，可以调试JavaScript，TypeScript,TypeScript以及任何转换为JavaScript的语言，要调试其他语言和运行时(包括PHP,Ruby,Go,C#,Python,C++,Powershell等)，需要在VS扩展中查找安装调试器扩展。</p></blockquote><ul><li>如果涉及到其他语言，需安装附加调试器</li></ul><h3 id="8-2-添加断点"><a href="#8-2-添加断点" class="headerlink" title="8.2 添加断点"></a>8.2 添加断点</h3><blockquote><p>在编辑器代码区域最左端，点击添加断点</p></blockquote><h3 id="8-3-调试快捷键"><a href="#8-3-调试快捷键" class="headerlink" title="8.3 调试快捷键"></a>8.3 调试快捷键</h3><div class="table-container"><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F5</td><td>继续/暂停</td></tr><tr><td>F10</td><td>跳过</td></tr><tr><td>F11</td><td>进入</td></tr><tr><td>Shift+F11</td><td>退出</td></tr><tr><td>Ctrl+Shift+F5</td><td>重新开始</td></tr><tr><td>Shift+F5</td><td>停止</td></tr></tbody></table></div><h2 id="9-VS-Code-集成终端"><a href="#9-VS-Code-集成终端" class="headerlink" title="9 VS Code 集成终端"></a>9 VS Code 集成终端</h2><blockquote><p>在Visual Studio Code中，您可以打开一个集成终端，最初从工作区的根目录开始，这可以非常方便，因为您不必切换窗口或更改现有终端的状态以执行快速命令行任务</p></blockquote><h3 id="9-1-打开终端视图"><a href="#9-1-打开终端视图" class="headerlink" title="9.1 打开终端视图"></a>9.1 打开终端视图</h3><ul><li>打开终端：Ctrl+` || view&gt;terminal 菜单 || 命令-&gt;Toggle Integrated Terminal</li><li>Ctrl+Shift+`：新建终端</li></ul><h3 id="9-2-管理多个终端"><a href="#9-2-管理多个终端" class="headerlink" title="9.2 管理多个终端"></a>9.2 管理多个终端</h3><ul><li>添加/删除多个终端</li></ul><h3 id="9-3-配置终端"><a href="#9-3-配置终端" class="headerlink" title="9.3 配置终端"></a>9.3 配置终端</h3><ul><li><p>终端类型,搜索 <code>terminal</code> 进行配置,具体的指向地址根基实际改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Command Prompt</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\cmd.exe"</span></span><br><span class="line"><span class="comment">// PowerShell</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span></span><br><span class="line"><span class="comment">// Git Bash</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span></span><br><span class="line"><span class="comment">// Bash on Ubuntu (on Windows)</span></span><br><span class="line"><span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\bash.exe"</span></span><br></pre></td></tr></table></figure></li><li><p>终端样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">terminal.integrated.fontFamily</span><br><span class="line">terminal.integrated.fontSize</span><br><span class="line">terminal.integrated.fontWeight</span><br><span class="line">terminal.integrated.fontWeightBold</span><br><span class="line">terminal.integrated.lineHeight</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-VS-Code使用Emmet"><a href="#10-VS-Code使用Emmet" class="headerlink" title="10 VS Code使用Emmet"></a>10 VS Code使用Emmet</h2><blockquote><p>Emmet类似于CSS选择器的语法来描述元素在生成的树和元素属性中的位置。</p><p>Tab或Enter键触发</p></blockquote><h3 id="10-1-元素"><a href="#10-1-元素" class="headerlink" title="10.1 元素"></a>10.1 元素</h3><ul><li>可以直接使用元素的名字来快速生成Html标签</li><li>可以编写任何单词并将其转换为标签</li></ul><h3 id="10-2-嵌套运算符"><a href="#10-2-嵌套运算符" class="headerlink" title="10.2 嵌套运算符"></a>10.2 嵌套运算符</h3><blockquote><p>嵌套运算符用于在生成的树中定位缩写的元素</p></blockquote><ul><li><code>&gt;</code>：子元素<ul><li>可以使用<code>&gt;</code>运算符将元素嵌套在彼此内</li></ul></li><li><code>+</code>：兄弟元素<ul><li>可以使用<code>+</code>运算符将元素放在彼此的附近，在同一级别上</li></ul></li><li><code>^</code>：向上<ul><li>使用<code>^</code>运算符，可以爬到树的上一个级别</li></ul></li><li><code>*</code>：乘法<ul><li>使用<code>*</code>运算符，可以定义元素应该输出的次数</li></ul></li><li><code>（）</code>：分组<ul><li>使用<code>()</code>对复杂缩写中的子树进行分组</li></ul></li><li><code>[]</code>：定义属性<ul><li>以<code>[id=ab][name=abel]</code>的格式定义属性值</li></ul></li><li><code>{}</code>：定义内容<ul><li>在元素标签中定义内容</li><li><code>$</code>：代表累加，也可以运用在属性定义中。</li></ul></li></ul><h3 id="10-3-属性运算符"><a href="#10-3-属性运算符" class="headerlink" title="10.3 属性运算符"></a>10.3 属性运算符</h3><blockquote><p>属性运算符用于修改输出元素的属性</p></blockquote><ul><li><code>#id_name</code>：给元素添加id属性</li><li><code>.class_name</code>：给元素添加class属性</li></ul><h3 id="10-4-CSS缩写"><a href="#10-4-CSS缩写" class="headerlink" title="10.4 CSS缩写"></a>10.4 CSS缩写</h3><blockquote><p>对于CSS语法，Emmet有很多预定义的属性片段。</p><p>作用于Style区域中</p></blockquote><p>例如：</p><ul><li><p><code>m-10--20</code>：<code>margin: -10px -20px;</code></p></li><li><p><code>p20</code>：<code>padding: 20px;</code></p></li><li><code>h20</code>：<code>height: 20px;</code></li><li>……..</li></ul><h2 id="11-Vscode开发JavaScript"><a href="#11-Vscode开发JavaScript" class="headerlink" title="11 Vscode开发JavaScript"></a>11 Vscode开发JavaScript</h2><h3 id="11-1-智能跟踪"><a href="#11-1-智能跟踪" class="headerlink" title="11.1 智能跟踪"></a>11.1 智能跟踪</h3><ul><li>常见结构<ul><li>for</li><li>while</li><li>do while</li><li>if else</li><li>try/catch</li><li>…..</li></ul></li><li>代码提示</li><li>自动导入</li></ul><h3 id="11-2-文本注释"><a href="#11-2-文本注释" class="headerlink" title="11.2 文本注释"></a>11.2 文本注释</h3><ul><li><code>Ctrl+/</code>：注释 </li><li><code>Shift+Alt+A</code>：块注释</li></ul><h3 id="11-3-代码重构"><a href="#11-3-代码重构" class="headerlink" title="11.3 代码重构"></a>11.3 代码重构</h3><ul><li>提取函数</li><li>提取变量</li></ul><h2 id="12-VS-Code-创建markdown格式文件"><a href="#12-VS-Code-创建markdown格式文件" class="headerlink" title="12 VS Code 创建markdown格式文件"></a>12 VS Code 创建markdown格式文件</h2><h3 id="12-1-markdown扩展"><a href="#12-1-markdown扩展" class="headerlink" title="12.1 markdown扩展"></a>12.1 markdown扩展</h3><ul><li>Markdown All in One</li><li>Markdown Shortcuts</li></ul><h2 id="13-VS-Code-开发TypeScript"><a href="#13-VS-Code-开发TypeScript" class="headerlink" title="13 VS Code 开发TypeScript"></a>13 VS Code 开发TypeScript</h2><blockquote><p>TypeScript是JavaScript的类型超集，可以编译为纯JavaScript，它提供了类，模块和接口，可以帮助我们构建健壮的组件</p></blockquote><h3 id="13-1-安装TypeScript编辑器"><a href="#13-1-安装TypeScript编辑器" class="headerlink" title="13.1 安装TypeScript编辑器"></a>13.1 安装TypeScript编辑器</h3><ul><li><p>命令行安装: <code>npm install -g typescript</code></p></li><li><p>验证</p><ul><li><code>tsc --version</code></li><li><code>tsc --help</code></li></ul></li></ul><h3 id="13-2-创建-ts"><a href="#13-2-创建-ts" class="headerlink" title="13.2 创建.ts"></a>13.2 创建.ts</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Startup</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> main(): number &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过编译，我们可以将.ts文件转换为.js文件</p><ul><li>编译 <code>tsc 文件名.ts</code></li></ul><h3 id="13-3-创建ts项目"><a href="#13-3-创建ts项目" class="headerlink" title="13.3 创建ts项目"></a>13.3 创建ts项目</h3><ul><li><p>tsconfig.json配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 任务编译项目</p><ul><li><code>Ctrl+Shift+B</code>：Run Build Task</li></ul></li></ul><h2 id="1-扩展推荐"><a href="#1-扩展推荐" class="headerlink" title="1 扩展推荐"></a>1 扩展推荐</h2><blockquote><p>按需采纳</p></blockquote><ul><li>HTML Snippets</li><li>HTML CSS Support</li><li>intelliSense for CSS class names in HTML</li><li>HTMLHint</li><li>Beautify css/sass/scss/less</li><li><p>stylelint</p></li><li><p>color plcker</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex的学习与使用</title>
      <link href="/2020/05/07/vuex%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/07/vuex%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于vue-cli的关于VueX的练习</p></blockquote><h2 id="1-Vuex的核心概念"><a href="#1-Vuex的核心概念" class="headerlink" title="1 Vuex的核心概念"></a>1 Vuex的核心概念</h2><blockquote><p>Vuex中 的主要核心概念如下：</p></blockquote><ul><li>State：唯一数据源</li><li>Mutation：通过函数，改变数据源</li><li>Action：异步操作</li><li>Getter：类似于管道</li><li>modules: Vuex 允许我们将 store 分割成<strong>模块</strong></li></ul><h3 id="1-1-State"><a href="#1-1-State" class="headerlink" title="1.1 State"></a>1.1 State</h3><blockquote><p>State提供唯一的公共数据源，所有共享的数据都要统一放到State中进行存储</p></blockquote><h4 id="1-1-1-定义State"><a href="#1-1-1-定义State" class="headerlink" title="1.1.1 定义State"></a>1.1.1 定义State</h4><ul><li>创建store数据源，提供唯一公共数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-1-2-访问State中的数据"><a href="#1-1-2-访问State中的数据" class="headerlink" title="1.1.2 访问State中的数据"></a>1.1.2 访问State中的数据</h4><ul><li><p>组件访问State中数据的第一种方式</p><ul><li><blockquote><p>子组件通过this.$store访问数据</p></blockquote></li><li><p>组件直接通过this.$store访问数据</p><ul><li>基本格式：<code>this.$store.state.全局数据名称</code></li></ul></li></ul></li><li><p>组件访问State中数据的第二种方式</p><ul><li><blockquote><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余，为了解决这个问题，我们可以使用mapState辅助函数帮助我们生成计算属性。</p></blockquote></li><li><p>从vuex中按需导入mapState函数</p><ul><li>导入mapState函数：<code>import { mapState } from &#39;vuex&#39;</code></li></ul></li><li><p>将全局数据， 映射为当前组件的计算属性</p><ul><li><p>映射为计算机属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.count</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-2-Mutation"><a href="#1-2-Mutation" class="headerlink" title="1.2 Mutation"></a>1.2 Mutation</h3><blockquote><p>Mutation用于变更Store中的数据 </p></blockquote><h4 id="1-2-1-定义Mutation"><a href="#1-2-1-定义Mutation" class="headerlink" title="1.2.1 定义Mutation"></a>1.2.1 定义Mutation</h4><ul><li><p>只能通过mutation变更Store数据，不可以直接操作Store中的数据</p></li><li><p>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</p><ul><li><p>定义Mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutation: &#123;</span><br><span class="line">        <span class="comment">// 可以在触发mutations的时候传递参数</span></span><br><span class="line">        add(state) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-2-2-调用mutations的方法"><a href="#1-2-2-调用mutations的方法" class="headerlink" title="1.2.2 调用mutations的方法"></a>1.2.2 调用mutations的方法</h4><blockquote><p>通过调用中心定义的mutations的方法，进而来改变数据，也只有mutations中的函数有权利修改state中的数据</p></blockquote><ul><li><p>触发mutations的第一种方法</p><ul><li><p>基本格式：<code>this.$store.commit(&#39;add&#39;)</code></p></li><li><p>在触发mutations时传递参数</p><ul><li><p>定义mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addN(state, step) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle2 () &#123;</span><br><span class="line">        <span class="comment">// 在调用commit函数</span></span><br><span class="line">        <span class="comment">// 触发 mutation 时携带参数</span></span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'addN'</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>触发mutations的第二种方式</p><ul><li><p>从vuex中按需导入 mapMutations 函数</p><ul><li>导入mapMutations函数：<code>import { mapMutations } from &#39;vuex&#39;</code></li></ul></li><li><p>将所需要的mutations函数，映射为当前组件的methods方法</p><ul><li><p>映射为methods方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methosd: &#123;</span><br><span class="line">    ...mapMutations([<span class="string">'add'</span>, <span class="string">'addN'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>触发mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实参中，只需要输入另外的，不在仓库中定义的值</span></span><br><span class="line"><span class="keyword">this</span>.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-3-Action"><a href="#1-3-Action" class="headerlink" title="1.3 Action"></a>1.3 Action</h3><blockquote><p> Action用于处理异步任务</p><p>如果通过异步操作改变数据，必须通过Action,而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据</p></blockquote><h4 id="1-3-1-定义Action"><a href="#1-3-1-定义Action" class="headerlink" title="1.3.1 定义Action"></a>1.3.1 定义Action</h4><ul><li><p>在Action中定义异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 传入一个形参，用于调用commit等方法</span></span><br><span class="line">        addAsync(context) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 在action中，不能直接修改state中的数据，必须通过context.commit调用mutations中定义的函数</span></span><br><span class="line">                <span class="comment">// commit只能调用mutations中的函数</span></span><br><span class="line">                context.commit(<span class="string">'add'</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-2-触发Action的方法"><a href="#1-3-2-触发Action的方法" class="headerlink" title="1.3.2 触发Action的方法"></a>1.3.2 触发Action的方法</h4><ul><li><p>触发actions的第一种方式</p><ul><li><p>基本格式：<code>this.$store.dispatch(&#39;addAsync &#39;)</code></p></li><li><p>在触发actions异步任务的时候传递参数</p><ul><li><p>定义action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addN(state, step) &#123;</span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        addNAsync(context, step)&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            context.commit(<span class="string">'addN'</span>,step)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发actions的时候携带参数</span></span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'addNAsync'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>触发actions的第二种方式</p><ul><li><p>从vuex中按需导入mapActions函数</p><ul><li>导入mapActions函数：<code>import { mapActions } from &#39;vuex&#39;</code></li></ul></li><li><p>通过导入的mapActions函数，将需要的actons函数，映射为当前组件的methods方法</p><ul><li><p>映射为methods方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">...mapActions([&#39;addNAsync&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>触发actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实参中，只需要输入另外的，不在仓库中定义的值</span></span><br><span class="line"><span class="keyword">this</span>.addNAsync(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-4-Getter"><a href="#1-4-Getter" class="headerlink" title="1.4 Getter"></a>1.4 Getter</h3><blockquote><p>Getter用于对Store中的数据进行加工处理形成新的数据</p><p>Getter可以对Store总已有的数据进行加工处理之后形成新的数据，类似Vue的计算属性</p><p>Store中数据发生变化的时候，Getter的数据也会跟着变化</p></blockquote><h4 id="1-4-1-定义Getter"><a href="#1-4-1-定义Getter" class="headerlink" title="1.4.1 定义Getter"></a>1.4.1 定义Getter</h4><ul><li><p>在getters中定义加工函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters : &#123;</span><br><span class="line">        showNum: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'当前最新的数量是['</span>+ state.count +<span class="string">']'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-使用getter的方法"><a href="#1-4-2-使用getter的方法" class="headerlink" title="1.4.2 使用getter的方法"></a>1.4.2 使用getter的方法</h4><ul><li><p>使用getter的第一种方法</p><ul><li>基本格式：<code>this.$store.getters.名称</code></li></ul></li><li><p>使用getter的第二种方式</p><ul><li><p>从vuex中按需导入mapGetters函数</p><ul><li>导入mapGetters函数：<code>import { mapGetters } from &#39;Vuex&#39;</code></li></ul></li><li><p>通过导入的mapGetters函数，将需要的getter函数，映射为当前组件的computed属性</p><ul><li><p>映射为computed属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'showNum'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.showNum</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="2-基于Vuex的小案例"><a href="#2-基于Vuex的小案例" class="headerlink" title="2 基于Vuex的小案例"></a>2 基于Vuex的小案例</h2><blockquote><p>Todos备忘录小案例</p></blockquote><h3 id="2-1-初始化项目"><a href="#2-1-初始化项目" class="headerlink" title="2.1 初始化项目"></a>2.1 初始化项目</h3><h4 id="2-1-1-基于vue-cli创建项目"><a href="#2-1-1-基于vue-cli创建项目" class="headerlink" title="2.1.1 基于vue cli创建项目"></a>2.1.1 基于vue cli创建项目</h4><ul><li>通过vue ui命令打开可视化面板<ul><li>必须的项目配置<ul><li>vuex</li></ul></li></ul></li></ul><h4 id="2-1-2-安装依赖"><a href="#2-1-2-安装依赖" class="headerlink" title="2.1.2 安装依赖"></a>2.1.2 安装依赖</h4><ul><li>安装vuex依赖包<ul><li>运行依赖<ul><li>axios</li><li>ant-design-vue</li></ul></li></ul></li></ul><h4 id="2-1-3-实现Todos基本布局"><a href="#2-1-3-实现Todos基本布局" class="headerlink" title="2.1.3 实现Todos基本布局"></a>2.1.3 实现Todos基本布局</h4><ul><li>基于已有的样式模板<ul><li>根据vue-todos文档修改内容</li></ul></li></ul><h4 id="2-1-4-示例"><a href="#2-1-4-示例" class="headerlink" title="2.1.4 示例"></a>2.1.4 示例</h4><ul><li><p>过程、备注见源码内容。</p></li><li><p>源码：<a href="https://github.com/Abell99/my_vuex_todos" target="_blank" rel="noopener">https://github.com/Abell99/my_vuex_todos</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo-GitHub建立的个人博客踩坑纪要</title>
      <link href="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/"/>
      <url>/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://juejin.im/post/5e9b3e87e51d4546d439834a#heading-18" target="_blank" rel="noopener">彻底搞懂如何使用Hexo+GitHubPages搭建个人博客</a></li></ul><p>个人博客网站：</p><ul><li><a href="https://www.abel.run/" target="_blank" rel="noopener">https://www.abel.run/</a></li></ul><p>搭建前提准备：</p><ul><li>node环境</li><li>GitHub账号</li><li>安装有git，并配置了用户以及ssh密钥</li></ul><blockquote><p>大致流程为：</p><p>在GitHub上面初始化一个仓库，开放master主干为GitHub Pages的源文件，复制该仓库的ssh地址。在本地通过初始化hexo根目录，并安装所需依赖，配置_config.yml文件，安装hexo提供的上传插件，生成博客并上g传到GitHub上面</p></blockquote><h2 id="0-记录点不同"><a href="#0-记录点不同" class="headerlink" title="0.记录点不同"></a>0.记录点不同</h2><blockquote><p>大致的流程都在参考文章有了详细的描述，这里只记录自己根据参考文章实现的过程中遇到的一些小的坑</p></blockquote><h3 id="一-关于-config-yml的配置"><a href="#一-关于-config-yml的配置" class="headerlink" title="一.关于_config.yml的配置"></a>一.关于_config.yml的配置</h3><blockquote><p>这里只记录配置第一次博客上传的要点</p></blockquote><h4 id="1-上传地址的配置"><a href="#1-上传地址的配置" class="headerlink" title="1.上传地址的配置"></a>1.上传地址的配置</h4><blockquote><p>上传地址的配置关系着能否准确的连接仓库完成上传指令</p></blockquote><p>以下是我的上传配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Abell99/Abell99.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h5 id="1-1repo的准确获取"><a href="#1-1repo的准确获取" class="headerlink" title="1.1repo的准确获取"></a>1.1repo的准确获取</h5><ul><li>找到目标仓库</li><li>使用ssh连接</li><li>复制上传地址</li></ul><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042501.png" alt="复制上传地址"></p><h4 id="2-css样式的地址配置"><a href="#2-css样式的地址配置" class="headerlink" title="2.css样式的地址配置"></a>2.css样式的地址配置</h4><blockquote><p>因为上传到仓库后，引用地址发生改变，因此我们需要配置基准地址，以确保在上传至仓库后，css样式得以完整的显示</p></blockquote><p>以下是我的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https:<span class="comment">//abell99.github.io</span></span><br><span class="line">root: <span class="regexp">/Abell99/</span></span><br></pre></td></tr></table></figure><p>细节：url为网址，root为仓库名，区分大小写，url地址最后不跟“/”，而root要使用“/”包住</p><p>注意：url,root并非必须设置成这样，可根据资源所在位置进行调整。</p><h5 id="2-1url地址的获取"><a href="#2-1url地址的获取" class="headerlink" title="2.1url地址的获取"></a>2.1url地址的获取</h5><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042502.png" alt="精准获取url1"></p><p><img src="/2020/04/25/%E5%9F%BA%E4%BA%8EHexo-GitHub%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E7%BA%AA%E8%A6%81/2020042503.png" alt="精准获取url2"></p><ul><li>打开仓库设置界面</li><li>找到GitHub Pages下提供的url地址</li></ul><h3 id="二-新建文章以及图片显示问题"><a href="#二-新建文章以及图片显示问题" class="headerlink" title="二.新建文章以及图片显示问题"></a>二.新建文章以及图片显示问题</h3><blockquote><p>默认的新建文章是不配对应的图片文件的，需要安装插件</p></blockquote><h4 id="1-配置-config-yml"><a href="#1-配置-config-yml" class="headerlink" title="1.配置_config.yml"></a>1.配置_config.yml</h4><ul><li>post_asset_folder的值设为true</li></ul><h4 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h4><ul><li><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li></ul><h4 id="3-修改插件内容"><a href="#3-修改插件内容" class="headerlink" title="3.修改插件内容"></a>3.修改插件内容</h4><ul><li>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-引入方法"><a href="#4-引入方法" class="headerlink" title="4.引入方法"></a>4.引入方法</h4><p>图示文件地址目录结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如何在博客文档中插入图片</span><br><span class="line">---图片<span class="number">1.</span>jpg</span><br><span class="line">如何在博客文档中插入图片.md</span><br></pre></td></tr></table></figure><ul><li>使用<code>![描述文字](如何在博客文档中插入图片\图片1.jpg)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑纪要 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
